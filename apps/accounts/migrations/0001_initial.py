# Generated by Django 5.0.3 on 2024-03-20 15:34

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('city', models.CharField(help_text='Название города', max_length=50, verbose_name='Город')),
                ('street', models.CharField(help_text='Название улицы', max_length=50, verbose_name='Улица')),
                ('house', models.CharField(help_text='Номер дома', max_length=50, verbose_name='Дом')),
                ('flat', models.CharField(help_text='Номер квартиры', max_length=50, verbose_name='Квартира')),
                ('other', models.CharField(blank=True, help_text='Дополнительная информация об адресе', max_length=100, null=True, verbose_name='Дополнительно')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Дата и время создания записи', verbose_name='Дата создания')),
            ],
            options={
                'verbose_name': 'Адрес',
                'verbose_name_plural': 'Адреса',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('image', models.ImageField(blank=True, help_text='Изображение пользователя', upload_to='users_images', verbose_name='Изображение')),
                ('birthday', models.DateField(blank=True, help_text='Дата рождения пользователя', null=True, verbose_name='Дата рождения')),
                ('phone_number', models.CharField(blank=True, help_text='Номер телефона пользователя', max_length=12, null=True, verbose_name='Номер телефона')),
                ('country', models.CharField(blank=True, help_text='Название страны пользователя', max_length=50, null=True, verbose_name='Страна')),
                ('bonus', models.DecimalField(decimal_places=2, default=0, help_text='Количество бонусов у пользователя', max_digits=10, verbose_name='Бонусы')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('my_address', models.ManyToManyField(blank=True, help_text='Список адресов пользователя', to='accounts.address', verbose_name='Мои адреса')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
